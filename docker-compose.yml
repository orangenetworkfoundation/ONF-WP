# ONF WP 1.0.3 - Simple, Objective, Powerful Local WordPress Development
# Project name derived from directory. Uses verified 'latest' tags. Includes Adminer.

services:
  mariadb:
    image: wodby/mariadb:11.4 # Wodby's latest build for the MariaDB 11.4 series
    container_name: "${COMPOSE_PROJECT_NAME}_mariadb"
    restart: unless-stopped
    stop_grace_period: 30s
    environment:
      MYSQL_DATABASE: "${COMPOSE_PROJECT_NAME}" # Use COMPOSE_PROJECT_NAME directly
      MYSQL_USER: "${COMPOSE_PROJECT_NAME}"
      MYSQL_PASSWORD: "localdevpassword_for_${COMPOSE_PROJECT_NAME}"
      MYSQL_ROOT_PASSWORD: "localdevrootpassword_for_${COMPOSE_PROJECT_NAME}"
    volumes:
      - mariadb_data:/var/lib/mysql
    # ports: # Uncomment to expose MariaDB to host (see MARIADB_PORT_FORWARD in .env)
    #   - "${MARIADB_PORT_FORWARD:-3306}:3306"
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost", "--user=${COMPOSE_PROJECT_NAME}", "--password=localdevpassword_for_${COMPOSE_PROJECT_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  php:
    image: wodby/wordpress:latest # Wodby's overall latest stable WordPress (WP6 on recent PHP)
    container_name: "${COMPOSE_PROJECT_NAME}_php"
    entrypoint: ["/usr/local/bin/onf-wp-entrypoint.sh"]
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
    environment:
      # DEBUG: "1" # Enable debug mode for Wodby scripts
      COMPOSE_PROJECT_NAME: "${COMPOSE_PROJECT_NAME}" # Pass for wp-config and entrypoint if needed
      TRAEFIK_HTTPS_PORT: "${TRAEFIK_HTTPS_PORT}" # Pass Traefik HTTPS port for correct URL generation
      DB_HOST: mariadb
      WORDPRESS_DB_HOST: mariadb
      DB_NAME: "${COMPOSE_PROJECT_NAME}"
      WORDPRESS_DB_NAME: "${COMPOSE_PROJECT_NAME}" # Ensure wp-config uses this if preferred
      DB_USER: "${COMPOSE_PROJECT_NAME}"
      WORDPRESS_DB_USER: "${COMPOSE_PROJECT_NAME}" # Ensure wp-config uses this if preferred
      DB_PASSWORD: "localdevpassword_for_${COMPOSE_PROJECT_NAME}"
      WORDPRESS_DB_PASSWORD: "localdevpassword_for_${COMPOSE_PROJECT_NAME}"
      PHP_FPM_USER: wodby
      PHP_FPM_GROUP: wodby
      WORDPRESS_TABLE_PREFIX: "wp_${COMPOSE_PROJECT_NAME}_" # Use full project name for prefix
      PROJECT_DOMAIN: "${PROJECT_DOMAIN}"
      WORDPRESS_SITE_URL: "https://${PROJECT_DOMAIN}"
      WORDPRESS_HOME_URL: "https://${PROJECT_DOMAIN}"
      WORDPRESS_TRUST_X_FORWARDED_PROTO: "true"
    volumes:
      - ./wordpress:/var/www/html:cached
      - ./onf-wp-entrypoint.sh:/usr/local/bin/onf-wp-entrypoint.sh:ro
      - ./wp-config-onf-sample.php:/var/www/html/wp-config-onf-sample.php:ro

  nginx:
    image: wodby/nginx:latest
    container_name: "${COMPOSE_PROJECT_NAME}_nginx"
    restart: unless-stopped
    depends_on:
      - php
    environment:
      NGINX_VHOST_PRESET: wordpress
      NGINX_BACKEND_HOST: php
      NGINX_SERVER_ROOT: /var/www/html
    volumes:
      - ./wordpress:/var/www/html:cached
    labels:
      - "traefik.enable=true"
      # HTTP Router (No longer redirects, serves directly)
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx_http_router.rule=Host(`${PROJECT_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx_http_router.entrypoints=web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx_http_router.service=${COMPOSE_PROJECT_NAME}_nginx_service"
      # HTTPS Router (Remains for direct access via HTTPS port if needed, or can be removed if CF is sole HTTPS source)
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx_https_router.rule=Host(`${PROJECT_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx_https_router.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx_https_router.tls=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx_https_router.service=${COMPOSE_PROJECT_NAME}_nginx_service"
      # Service definition (Nginx internal port)
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}_nginx_service.loadbalancer.server.port=80"

  wpcli:
    image: wordpress:cli # Official WordPress CLI image
    container_name: "${COMPOSE_PROJECT_NAME}_wpcli"
    depends_on:
      mariadb:
        condition: service_healthy
      php: # Depends on PHP service for files and some env vars if not directly set
        condition: service_started
    environment:
      WORDPRESS_DB_HOST: mariadb
      WORDPRESS_DB_NAME: "${COMPOSE_PROJECT_NAME}"
      WORDPRESS_DB_USER: "${COMPOSE_PROJECT_NAME}"
      WORDPRESS_DB_PASSWORD: "localdevpassword_for_${COMPOSE_PROJECT_NAME}"
      # WP-CLI needs to know the table prefix if it's custom
      WORDPRESS_TABLE_PREFIX: "wp_${COMPOSE_PROJECT_NAME}_" # Use full project name for prefix
    volumes:
      - ./wordpress:/var/www/html # Mount WordPress files
    # Keep container running. User will exec into it.
    command: tail -f /dev/null
    # Or, for direct command execution (less common for persistent service):
    # entrypoint: ["wp"]

  crond:
    image: wodby/wordpress:latest # Matches PHP service for WP-CLI compatibility
    container_name: "${COMPOSE_PROJECT_NAME}_crond"
    init: true
    entrypoint: ["sudo", "crond", "-f", "-L", "/dev/stdout"] # Bypass Wodby WP setup logic
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
      php:
        condition: service_started
    environment:
      CRONTAB_SCHEDULE: "0 * * * *"
      CRONTAB_COMMAND: "wp cron event run --due-now --path=/var/www/html"
      DB_HOST: mariadb
      WORDPRESS_DB_HOST: mariadb # Explicit for clarity if wp-cli in this image uses it
      DB_NAME: "${COMPOSE_PROJECT_NAME}"
      WORDPRESS_DB_NAME: "${COMPOSE_PROJECT_NAME}"
      DB_USER: "${COMPOSE_PROJECT_NAME}"
      WORDPRESS_DB_USER: "${COMPOSE_PROJECT_NAME}"
      DB_PASSWORD: "localdevpassword_for_${COMPOSE_PROJECT_NAME}"
      WORDPRESS_DB_PASSWORD: "localdevpassword_for_${COMPOSE_PROJECT_NAME}"
      WORDPRESS_TABLE_PREFIX: "wp_${COMPOSE_PROJECT_NAME}_" # Use full project name for prefix
    volumes:
      - ./wordpress:/var/www/html:cached
    # command: sudo crond -f -L /dev/stdout # This is now part of the entrypoint

  adminer:
    image: wodby/adminer:latest
    container_name: "${COMPOSE_PROJECT_NAME}_adminer"
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_DB_DRIVER: mysql
      ADMINER_DEFAULT_DB_HOST: mariadb
      ADMINER_DEFAULT_DB_NAME: "${COMPOSE_PROJECT_NAME}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_adminer_router.rule=Host(`db.${PROJECT_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_adminer_router.entrypoints=web" # Stays on HTTP for simplicity
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_adminer_router.service=${COMPOSE_PROJECT_NAME}_adminer_service"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}_adminer_service.loadbalancer.server.port=80"

  traefik:
    image: traefik:v3.0
    container_name: "${COMPOSE_PROJECT_NAME}_traefik"
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443" # Define 'websecure' entrypoint for HTTPS
      # For local dev, Traefik can generate self-signed certs by default for routers using TLS
      # Or, provide your own certificates via dynamic config or static config if needed for real domains
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
      - "${TRAEFIK_HTTPS_PORT}:443" # Map HTTPS port from .env
      - "${TRAEFIK_WEBUI_PORT}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  mariadb_data:
    name: "mariadb_data_${COMPOSE_PROJECT_NAME}" # Ensure volume name is unique per project
    driver: local